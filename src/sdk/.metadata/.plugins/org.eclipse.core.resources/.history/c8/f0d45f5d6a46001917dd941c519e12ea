/*
 * main.c
 *
 *  Created on: Mar 11, 2019
 *      Author: pelle
 */

#include <math.h>

//AXI GPIO driver
#include "xgpio.h"
#include "xil_exception.h"
#include "xintc.h"
#include "xtmrctr.h"

//send data over UART
#include "xil_printf.h"

//information about AXI peripherals
#include "xparameters.h"


// https://github.com/Xilinx/embeddedsw/blob/master/XilinxProcessorIPLib/drivers/tmrctr/examples/xtmrctr_intr_example.c
#define TMRCTR_DEVICE_ID	XPAR_TMRCTR_0_DEVICE_ID
#define TMRCTR_INTERRUPT_ID	XPAR_INTC_0_TMRCTR_0_VEC_ID
#define INTC_DEVICE_ID	XPAR_INTC_0_DEVICE_ID
#define TIMER_CNTR_0	0
#define INTC		XIntc
#define INTC_HANDLER	XIntc_InterruptHandler

#define RESET_VALUE	0xC4653600

INTC InterruptController;  /* The instance of the Interrupt Controller */

XTmrCtr TimerCounterInst; /* The instance of the Timer Counter */

volatile int TimerExpired;

void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber)
{
	XTmrCtr *InstancePtr = (XTmrCtr *)CallBackRef;

	if (XTmrCtr_IsExpired(InstancePtr, TmrCtrNumber)) {
//		TimerExpired++;
//		if (TimerExpired == 3) {
//			XTmrCtr_SetOptions(InstancePtr, TmrCtrNumber, 0);
//		}
		xil_printf("interrupt!\r\n");
	}
}

int initCounter()
{
	int Status;
//	int LastTimerExpired = 0;

	xil_printf("Initializing timer\r\n");

	Status = XTmrCtr_Initialize(&TimerCounterInst, TMRCTR_DEVICE_ID);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
	}

	Status = XTmrCtr_SelfTest(&TimerCounterInst, TIMER_CNTR_0);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
	}

	Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	Status = XIntc_Connect(&InterruptController, INTC_DEVICE_ID,
		(XInterruptHandler)XTmrCtr_InterruptHandler,
		(void *)&TimerCounterInst);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XIntc_Enable(&InterruptController, INTC_DEVICE_ID);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
						(Xil_ExceptionHandler)
						INTC_HANDLER,
						&InterruptController);

	Xil_ExceptionEnable();

	XTmrCtr_SetHandler(&TimerCounterInst, TimerCounterHandler,
	&TimerCounterInst);

	XTmrCtr_SetOptions(&TimerCounterInst, TIMER_CNTR_0,
	XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	XTmrCtr_SetResetValue(&TimerCounterInst, TIMER_CNTR_0, RESET_VALUE);

	XTmrCtr_Start(&TimerCounterInst, TIMER_CNTR_0);

	return XST_SUCCESS;
}

int main()
{
	XGpio gpio;
	u32 counter		= 0;
	u8 direction 	= 0;

	XGpio_Initialize(&gpio, 1);

	XGpio_SetDataDirection(&gpio, 1, 0x00000000); // set GPIO channel tristates to All Output
	xil_printf("\rnoteTrainer started.\n");

	initCounter();

	while (1)
	{
//		while (counter++ < pow(10, 6));
//		xil_printf("\rcounter finished.\n");
//		counter = 0;
//		direction ^= 1;
//		XGpio_DiscreteWrite(&gpio, 1, direction*255);
//
//		xil_printf("\rset PIN_MONO: %d\n", direction);
	}
}

